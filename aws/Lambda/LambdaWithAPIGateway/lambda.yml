AWSTemplateFormatVersion: "2010-09-09"

Description: "创建一个Lambda函数,并用CloudWatch每10分钟调用一次"

Parameters:
  Word:
    Type: String
    Default: "World"
  LambdaFunctionName:
    Type: String
    Default: "temporary-test"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub '${AWS::StackName}-LambdaExecutionRole'
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: 
            - 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda-CreateLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Action:
                - 'logs:CreateLogGroup'
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:logs:*:${AWS::AccountId}:*'
        - PolicyName: lambda-basic-execution-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Effect: Allow
              Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: LookupTrailEvents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Action:
                - 'cloudtrail:LookupEvents'
              Effect: Allow
              Resource: '*'
      
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: python3.7
      Environment:
        Variables: 
          Word: !Ref Word
      Code:
        ZipFile: 'No Code. Waiting update'
      Handler: lambda.lambda_handler
      Timeout: 60
      MemorySize: 256
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn

  LambdaFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${NameSpace}-api'

  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      PathPart: '{path+}'
      ParentId: !ImportValue 
        'Fn::Sub': '${NameSpace}-pre-infra:RootResourceId'
      RestApiId: !ImportValue 
        'Fn::Sub': '${NameSpace}-pre-infra:RestApiID'

  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub '${NameSpace}-pre-infra:RestApiID'
      ResourceId: !Ref APIGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  LambdaInvocationPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: LambdaFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Name
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiID}/*'
        - apiID:
            Fn::ImportValue: !Sub '${NameSpace}-pre-infra:RestApiID'

  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !ImportValue 
        'Fn::Sub': '${NameSpace}-pre-infra:RestApiID'
    DependsOn:
      - APIGatewayMethod

  Stage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref RestApiDeployment
      RestApiId: !ImportValue 
        'Fn::Sub': '${NameSpace}-pre-infra:RestApiID'
      StageName: Prod